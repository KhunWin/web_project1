'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var CheckRadioMixin = require('./CheckRadioMixin-2a894e60.js');
var plugins = require('./plugins-7c8be2b1.js');
require('./config.js');
require('./helpers.js');

/**
 * Select an option from a set
 * @displayName Radio
 * @style _radio.scss
 */
var script = vue.defineComponent({
    name: 'ORadio',
    mixins: [plugins.BaseComponentMixin, CheckRadioMixin.CheckRadioMixin],
    configField: 'radio',
    emits: [
        'input'
    ],
    props: {
        /**
         * Input label, unnecessary when default slot is used
         */
        label: {
            type: String,
            default: undefined,
        },
        /** Accessibility label to establish relationship between the checkbox and control label */
        ariaLabelledby: String,
        rootClass: [String, Function, Array],
        disabledClass: [String, Function, Array],
        checkedClass: [String, Function, Array],
        checkCheckedClass: [String, Function, Array],
        checkClass: [String, Function, Array],
        labelClass: [String, Function, Array],
        sizeClass: [String, Function, Array],
        variantClass: [String, Function, Array]
    },
    computed: {
        getLabel() {
            return this.$refs.label;
        },
        isChecked() {
            return this.modelValue === this.nativeValue;
        },
        rootClasses() {
            return [
                this.computedClass('rootClass', 'o-radio'),
                { [this.computedClass('checkedClass', 'o-radio--checked')]: this.isChecked },
                { [this.computedClass('sizeClass', 'o-radio--', this.size)]: this.size },
                { [this.computedClass('disabledClass', 'o-radio--disabled')]: this.disabled },
                { [this.computedClass('variantClass', 'o-radio--', this.variant)]: this.variant }
            ];
        },
        checkClasses() {
            return [
                this.computedClass('checkClass', 'o-radio__check'),
                { [this.computedClass('checkCheckedClass', 'o-radio__check--checked')]: this.isChecked },
            ];
        },
        labelClasses() {
            return [
                this.computedClass('labelClass', 'o-radio__label')
            ];
        }
    }
});

const _hoisted_1 = ["disabled", "required", "name", "value", "aria-labelledby"];
const _hoisted_2 = ["id"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return vue.openBlock(), vue.createElementBlock("label", {
    class: vue.normalizeClass(_ctx.rootClasses),
    ref: "label",
    onClick: _cache[2] || (_cache[2] = vue.withModifiers((...args) => _ctx.focus && _ctx.focus(...args), ["stop"])),
    onKeydown: _cache[3] || (_cache[3] = vue.withKeys(vue.withModifiers($event => _ctx.getLabel.click(), ["prevent"]), ["enter"]))
  }, [vue.withDirectives(vue.createElementVNode("input", {
    "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => _ctx.computedValue = $event),
    type: "radio",
    ref: "input",
    onClick: _cache[1] || (_cache[1] = vue.withModifiers(() => {}, ["stop"])),
    class: vue.normalizeClass(_ctx.checkClasses),
    disabled: _ctx.disabled,
    required: _ctx.required,
    name: _ctx.name,
    value: _ctx.nativeValue,
    "aria-labelledby": _ctx.ariaLabelledby
  }, null, 10 /* CLASS, PROPS */, _hoisted_1), [[vue.vModelRadio, _ctx.computedValue]]), _ctx.label || _ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 0,
    id: _ctx.ariaLabelledby,
    class: vue.normalizeClass(_ctx.labelClasses)
  }, [vue.renderSlot(_ctx.$slots, "default", {}, () => [vue.createTextVNode(vue.toDisplayString(_ctx.label), 1 /* TEXT */)])], 10 /* CLASS, PROPS */, _hoisted_2)) : vue.createCommentVNode("v-if", true)], 34 /* CLASS, HYDRATE_EVENTS */);
}

script.render = render;
script.__file = "src/components/radio/Radio.vue";

var index = {
    install(app) {
        plugins.registerComponent(app, script);
    }
};

exports.ORadio = script;
exports["default"] = index;
